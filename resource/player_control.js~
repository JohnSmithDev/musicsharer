/* JavaScript to drive the HTML generated by webserver_demo.py */

var audio = document.querySelector("audio");
var requestedTrackNumber = -1;
var playingTrackNumber = -2;

var pauseHack = false;

function loadTrack(ev) {
	/* Load track specified by ev, as follows:
	 ev is a number: play that track number (numbering starts from zero)
	 ev is undefined: play first track (track 0)
	 ev is an event: play track associated with ID of ev.target
	 */
	if (pauseHack) { return; }
    pauseHack = true;

	requestedTrackNumber = ev;
	if (typeof ev == "undefined") {
		requestedTrackNumber = 0;
	} else if (typeof ev !== "number") {
		var re = new RegExp("^.*\\-(\\d+)$");
		requestedTrackNumber = parseInt(re.exec(ev.target.id)[1], 10);
	}
	// console.log("requestedTrackNumber: " + requestedTrackNumber + 
	//             "/ trackName: " + requestedTrackName);
	updateItem(requestedTrackNumber, "loading");
	audio.src = trackNames[requestedTrackNumber];
}

function loadNextTrack() {
	log("loadNextTrack called...");
	loadTrack((requestedTrackNumber+1) % trackNames.length);
}
function clampTrackNumber(val) {
	/* Ensure that val is a valid track number, 'wrapping round'
	 * if necessary
	 */
	if (val < 0 ) {
		val = trackNames.length - 1;
	}
	if (val >= trackNames.length) {
		val = 0;
	}
	return val;
}

function skipButton(ev) {
	var newTrackNum = playingTrackNumber + 1;
	if (ev.target.id == "prev") {
		newTrackNum = playingTrackNumber - 1;
	}

	loadTrack(clampTrackNumber(newTrackNum));
}

function updateItem(trackNum, status) {
	/* Update the CSS class for specified track */
	if (trackNum>=0 && trackNum < trackNames.length) {
		document.getElementById("track-" + trackNum).setAttribute("class", 
		                                                          status);
	}
}

function log(msg) {
	var dbg = document.getElementById("debug");
	dbg.innerHTML += "<br />" + msg;
}

function playTrack() {
	if (requestedTrackNumber != playingTrackNumber) {
		updateItem(playingTrackNumber, "");
		log("playTrack: about to play track #" + requestedTrackNumber);
		audio.play();
		log("playTrack: playing track #" + requestedTrackNumber);
		playingTrackNumber = requestedTrackNumber;
		updateItem(playingTrackNumber, "playing");
		pauseHack = false;
	} else {
		log("playTrack: already playing track #" + requestedTrackNumber);
    }
}

var trackElements = document.querySelectorAll("li");
for (var i=0; i<trackElements.length; i++) {
	trackElements[i].addEventListener("click", loadTrack);
}
audio.addEventListener("canplaythrough", playTrack);

/* Mobile Safari doesn't reliably send 'ended', hence also listening for
 * 'paused', which introduces its own complications.
 * http://stackoverflow.com/questions/5738855/mobile-safari-html5-video-event-listener-ended-does-not-fire-the-2nd-time
 * EDIT: no still doesn't work reliably; looks like 'emptied'
 * is a more plausible trigger
 * EDIT#2: arrgh, it's "pause", not "paused"
 */
audio.addEventListener("ended", loadNextTrack);
audio.addEventListener("pause", loadNextTrack);
function emptiedHandler(ev) {
	log("emptiedHandler: track src is " + audio.getAttribute(src));
	setTimeout(playTrack, 1000);
}
audio.addEventListener("emptied", emptiedHandler);

document.getElementById("prev").addEventListener("click", skipButton);
document.getElementById("next").addEventListener("click", skipButton);
loadTrack(0);
